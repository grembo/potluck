#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        service cook onestop || true
        service cook onedisable || true
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
	echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

convert_to_required_format() {
	echo "$1" | sed 's/\([^,]*\)/"\1"/g'
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
	# shellcheck disable=SC1091
	. /tmp/environment.sh

	# XXX: Remove some things from here later
	cp -a /tmp/environment.sh /root/.env.cook
fi


########################################################################
## Check config
########################################################################

required_args="DATACENTER IP NODENAME CONSULSERVERS GOSSIPKEY DOMAIN"
required_args="$required_args DBHOST DBNAME DBUSER DBPASSWORD REDISHOST"
required_args="$required_args MAILSERVER MAILUSERNAME MAILPASSWORD"
required_args="$required_args ADMINNAME ADMINEMAIL ADMINPASSWORD FROMMAIL"
optional_args="REMOTELOG DISABLEUNBOUNDV6 DBPORT REDISPORT MAILPORT"
optional_args="$optional_args PVTCERT CERTEMAIL"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

# Input is "10.0.0.1,10.2.0.1,10.45.2.4"
# Expected output is "10.0.0.1","10.2.0.1","10.45.2.4"

if [ -n "${CONSULSERVERS+x}" ]; then
	FIXCONSULSERVERS=$(convert_to_required_format "$CONSULSERVERS")
	export FIXCONSULSERVERS
fi

# set DBPORT
if [ -n "${DBPORT+x}" ]; then
	SETDBPORT="$DBPORT"
	export SETDBPORT
else
	SETDBPORT="5432"
	export SETDBPORT
fi

# set REDISPORT
if [ -n "${REDISPORT+x}" ]; then
	SETREDISPORT="$REDISPORT"
	export SETREDISPORT
else
	SETREDISPORT="6379"
	export SETREDISPORT
fi

# set MAILPORT
if [ -n "${MAILPORT+x}" ]; then
	SETMAILPORT="$MAILPORT"
	export SETMAILPORT
else
	SETMAILPORT="25"
	export SETMAILPORT
fi

if [ -n "${CERTEMAIL+x}" ]; then
	SETCERTEMAIL="$CERTEMAIL"
	export SETCERTEMAIL
else
	SETCERTEMAIL="$ADMINEMAIL"
	export SETCERTEMAIL
fi

# stop services
timeout --foreground 10 \
  service consul onestop || service consul onestop || true
killall -9 consul || true

# shellcheck disable=SC2086
export PATH="/usr/local/share/cook/bin:$PATH"

if [ -n "${REMOTELOG}" ]; then
	log "Configure and start syslog-ng"
	configure-syslog-ng.sh
fi

log "Setup node_exporter"
configure-node-exporter.sh

log "Configure consul"
configure-consul.sh

log "Start consul and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service consul status; do
    service consul start || true; sleep 5;
  done'

# Disabling, only practical in VNET jails
# In future a parameter can be added to enable on VNET jails.
#log "Set up local unbound using local consul once consul running"
#configure-local-unbound.sh

log "Start node_exporter"
service node_exporter start

if [ -n "${PVTCERT}" ]; then
	log "Configure ssl"
	configure-ssl.sh
else
	log "Configure acme.sh"
	configure-acme.sh

	if [ -n "${REMOTELOG}" ]; then
		log "Configure certificate validity scripts"
		configure-scripts.sh
	fi
fi

log "Configure nginx"
configure-nginx.sh

log "Configure netbox"
configure-netbox.sh

log "Configure netbox_rq"
configure-netbox-rq.sh

# check if upgrades are needed
log "Check if upgrades are needed"
check-upgrade.sh

# create superuser account
log "Create superuser account"
create-superuser.sh

log "Start netbox"
timeout --foreground 120 \
  sh -c 'while ! service netbox status; do
    service netbox start || true; sleep 5;
  done'

log "Start netbox_rq"
timeout --foreground 120 \
  sh -c 'while ! service netbox_rq status; do
    service netbox_rq start || true; sleep 5;
  done'

log "Start nginx"
timeout --foreground 120 \
  sh -c 'while ! service nginx status; do
    service nginx start || true; sleep 5;
  done'

log "Exit seasoned"
pot_seasoned_exit
