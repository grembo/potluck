#!/bin/sh
RUNS_IN_NOMAD=true
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now alter configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        service cook onestop || true
        service cook onedisable || true
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi

########################################################################
## Get command line flag options used for nomad images
## Convert parameters to variables if passed (overwrite environment)
########################################################################
OPTIND=1
while getopts c:d:s:x:v: option
do
    case "${option}"
    in
      c) CADDYENABLE=${OPTARG}
         export CADDYENABLE
         ;;
      d) DATADIR=${OPTARG}
         export DATADIR
         ;;
      s) SELFSIGNHOST=${OPTARG}
         export SELFSIGNHOST
         ;;
      x) SPECIALPATCH=${OPTARG}
         export SPECIALPATCH
         ;;
      v) FROMGITHUB=${OPTARG}
         export FROMGITHUB
         ;;
    esac
done
shift "$((OPTIND-1))"

########################################################################
## Check config
########################################################################

required_args=""
optional_args="CADDYENABLE DATADIR SELFSIGNHOST SPECIALPATCH FROMGITHUB"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

export PATH="/usr/local/share/cook/bin:$PATH"

log "stop nginx service, kill nginx if around"
service nginx onestop || true
pkill nginx || true

log "stop php_fpm service, kill php_fpm if around"
#service php_fpm onestop || true
if [ -x /usr/local/etc/rc.d/php_fpm ] && [ ! -x /usr/local/etc/rc.d/php-fpm ]; then
	timeout --foreground 10 \
	  service php_fpm onestop || service php_fpm onestop || true
else
	timeout --foreground 10 \
	  service php-fpm onestop || service php-fpm onestop || true
fi
pkill php-fpm || true

log "Install nextcloud packages if they need installing"
if [ -n "$FROMGITHUB" ]; then
	install-nextcloud-github.sh
else
	install-nextcloud.sh
fi

log "Configure php"
configure-php.sh

log "Configure nextcloud"
configure-nextcloud.sh

log "Configure custom nextcloud config.php files"
configure-custom.sh

if [ -n "$CADDYENABLE" ]; then
	log "Configure caddy"
	configure-caddy.sh
else
	log "Configure nginx"
	configure-nginx.sh
fi

log "Configure cron"
configure-cron.sh

log "Start php-fpm"
#timeout --foreground 120 \
#  sh -c 'while ! service php_fpm status; do
#    service php_fpm start || true; sleep 5;
#  done'
if [ -x /usr/local/etc/rc.d/php_fpm ] && [ ! -x /usr/local/etc/rc.d/php-fpm ]; then
	service php_fpm start || true
else
	service php-fpm start || true
fi

if [ -n "$CADDYENABLE" ]; then
	log "Start caddy"
	service caddy start || true
else
	log "Start nginx"
	service nginx start || true
fi

# log "Start nginx"
# service nginx start || true
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status; do
#    service nginx start || true; sleep 5;
#  done'

# end script placement
log "Exit seasoned"
pot_seasoned_exit
